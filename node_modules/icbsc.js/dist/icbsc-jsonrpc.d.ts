import { AbiProvider, AuthorityProvider, AuthorityProviderArgs, BinaryAbi } from './icbsc-api-interfaces';
import { GetAbiResult, GetBlockResult, GetCodeResult, GetInfoResult, GetRawCodeAndAbiResult, PushTransactionArgs, GetBlockHeaderStateResult } from "./icbsc-rpc-interfaces";
export declare class JsonRpc implements AuthorityProvider, AbiProvider {
    endpoint: string;
    fetchBuiltin: (input?: Request | string, init?: RequestInit) => Promise<Response>;
    constructor(endpoint: string, args?: {
        fetch?: (input?: string | Request, init?: RequestInit) => Promise<Response>;
    });
    fetch(path: string, body: any): Promise<any>;
    get_abi(accountName: string): Promise<GetAbiResult>;
    get_account(accountName: string): Promise<any>;
    get_block_header_state(blockNumOrId: number | string): Promise<GetBlockHeaderStateResult>;
    get_block(blockNumOrId: number | string): Promise<GetBlockResult>;
    get_code(accountName: string): Promise<GetCodeResult>;
    get_currency_balance(code: string, account: string, symbol?: string): Promise<any>;
    get_currency_stats(code: string, symbol: string): Promise<any>;
    get_info(): Promise<GetInfoResult>;
    get_producer_schedule(): Promise<any>;
    get_producers(json?: boolean, lowerBound?: string, limit?: number): Promise<any>;
    get_raw_code_and_abi(accountName: string): Promise<GetRawCodeAndAbiResult>;
    getRawAbi(accountName: string): Promise<BinaryAbi>;
    get_scheduled_transactions(json?: boolean, lowerBound?: string, limit?: number): Promise<any>;
    get_table_rows({ json, code, scope, table, table_key, lower_bound, upper_bound, index_position, key_type, limit, reverse, show_payer, }: any): Promise<any>;
    get_table_by_scope({ code, table, lower_bound, upper_bound, limit, }: any): Promise<any>;
    getRequiredKeys(args: AuthorityProviderArgs): Promise<string[]>;
    push_transaction({ signatures, serializedTransaction, serializedContextFreeData }: PushTransactionArgs): Promise<any>;
    send_transaction({ signatures, serializedTransaction, serializedContextFreeData }: PushTransactionArgs): Promise<any>;
    db_size_get(): Promise<any>;
    history_get_actions(accountName: string, pos?: number, offset?: number): Promise<any>;
    history_get_transaction(id: string, blockNumHint?: number): Promise<any>;
    history_get_key_accounts(publicKey: string): Promise<any>;
    history_get_controlled_accounts(controllingAccount: string): Promise<any>;
}
