import { Abi, BlockTaposInfo } from './icbsc-rpc-interfaces';
export interface Field {
    name: string;
    typeName: string;
    type: Type;
}
export interface SerializerOptions {
    bytesAsUint8Array?: boolean;
}
export declare class SerializerState {
    options: SerializerOptions;
    skippedBinaryExtension: boolean;
    constructor(options?: SerializerOptions);
}
export interface Type {
    name: string;
    aliasOfName: string;
    arrayOf: Type;
    optionalOf: Type;
    extensionOf?: Type;
    baseName: string;
    base: Type;
    fields: Field[];
    serialize: (buffer: SerialBuffer, data: any, state?: SerializerState, allowExtensions?: boolean) => void;
    deserialize: (buffer: SerialBuffer, state?: SerializerState, allowExtensions?: boolean) => any;
}
export interface Symbol {
    name: string;
    precision: number;
}
export interface Contract {
    actions: Map<string, Type>;
    types: Map<string, Type>;
}
export interface Authorization {
    actor: string;
    permission: string;
}
export interface Action {
    account: string;
    name: string;
    authorization: Authorization[];
    data: any;
}
export interface SerializedAction {
    account: string;
    name: string;
    authorization: Authorization[];
    data: string;
}
export declare class SerialBuffer {
    length: number;
    array: Uint8Array;
    readPos: number;
    textEncoder: TextEncoder;
    textDecoder: TextDecoder;
    constructor({ textEncoder, textDecoder, array }?: {
        textEncoder?: TextEncoder;
        textDecoder?: TextDecoder;
        array?: Uint8Array;
    });
    reserve(size: number): void;
    haveReadData(): boolean;
    restartRead(): void;
    asUint8Array(): Uint8Array;
    pushArray(v: number[] | Uint8Array): void;
    push(...v: number[]): void;
    get(): number;
    pushUint8ArrayChecked(v: Uint8Array, len: number): void;
    getUint8Array(len: number): Uint8Array;
    skip(len: number): void;
    pushUint16(v: number): void;
    getUint16(): number;
    pushUint32(v: number): void;
    getUint32(): number;
    pushNumberAsUint64(v: number): void;
    getUint64AsNumber(): number;
    pushVaruint32(v: number): void;
    getVaruint32(): number;
    pushVarint32(v: number): void;
    getVarint32(): number;
    pushFloat32(v: number): void;
    getFloat32(): number;
    pushFloat64(v: number): void;
    getFloat64(): number;
    pushName(s: string): void;
    getName(): string;
    pushBytes(v: number[] | Uint8Array): void;
    getBytes(): Uint8Array;
    pushString(v: string): void;
    getString(): string;
    pushSymbolCode(name: string): void;
    getSymbolCode(): string;
    pushSymbol({ name, precision }: {
        name: string;
        precision: number;
    }): void;
    getSymbol(): {
        name: string;
        precision: number;
    };
    pushAsset(s: string): void;
    getAsset(): string;
    pushPublicKey(s: string): void;
    getPublicKey(): string;
    pushPrivateKey(s: string): void;
    getPrivateKey(): string;
    pushSignature(s: string): void;
    getSignature(): string;
}
export declare function supportedAbiVersion(version: string): boolean;
export declare function dateToTimePoint(date: string): number;
export declare function timePointToDate(us: number): string;
export declare function dateToTimePointSec(date: string): number;
export declare function timePointSecToDate(sec: number): string;
export declare function dateToBlockTimestamp(date: string): number;
export declare function blockTimestampToDate(slot: number): string;
export declare function stringToSymbol(s: string): {
    name: string;
    precision: number;
};
export declare function symbolToString({ name, precision }: {
    name: string;
    precision: number;
}): string;
export declare function arrayToHex(data: Uint8Array): string;
export declare function hexToUint8Array(hex: string): Uint8Array;
export declare function createInitialTypes(): Map<string, Type>;
export declare function getType(types: Map<string, Type>, name: string): Type;
export declare function getTypesFromAbi(initialTypes: Map<string, Type>, abi: Abi): Map<string, Type>;
export declare function transactionHeader(refBlock: BlockTaposInfo, expireSeconds: number): {
    expiration: string;
    ref_block_num: number;
    ref_block_prefix: number;
};
export declare function serializeActionData(contract: Contract, account: string, name: string, data: any, textEncoder: TextEncoder, textDecoder: TextDecoder): string;
export declare function serializeAction(contract: Contract, account: string, name: string, authorization: Authorization[], data: any, textEncoder: TextEncoder, textDecoder: TextDecoder): SerializedAction;
export declare function deserializeActionData(contract: Contract, account: string, name: string, data: string | Uint8Array | number[], textEncoder: TextEncoder, textDecoder: TextDecoder): any;
export declare function deserializeAction(contract: Contract, account: string, name: string, authorization: Authorization[], data: string | Uint8Array | number[], textEncoder: TextEncoder, textDecoder: TextDecoder): Action;
