import { PrivateKey } from './icbsc-key-conversions';
export declare function isNegative(bignum: Uint8Array): boolean;
export declare function negate(bignum: Uint8Array): void;
export declare function decimalToBinary(size: number, s: string): Uint8Array;
export declare function signedDecimalToBinary(size: number, s: string): Uint8Array;
export declare function binaryToDecimal(bignum: Uint8Array, minDigits?: number): string;
export declare function signedBinaryToDecimal(bignum: Uint8Array, minDigits?: number): string;
export declare function base58ToBinary(size: number, s: string): Uint8Array;
export declare function binaryToBase58(bignum: Uint8Array, minDigits?: number): string;
export declare function base64ToBinary(s: string): Uint8Array;
export declare enum KeyType {
    k1 = 0,
    r1 = 1,
    sm2 = 2,
    wa = 3
}
export declare const publicKeyDataSize = 33;
export declare const privateKeyDataSize = 32;
export declare const signatureDataSize = 65;
export interface Key {
    type: KeyType;
    data: Uint8Array;
}
export declare function stringToPublicKey(s: string): Key;
export declare function publicKeyToString(key: Key): string;
export declare function convertLegacyPublicKey(s: string): string;
export declare function convertLegacyPublicKeys(keys: string[]): string[];
export declare function stringToPrivateKey(s: string): Key;
export declare function privateKeyToString(key: Key): string;
export declare function stringToSignature(s: string): Key;
export declare function signatureToString(signature: Key): string;
export declare function concatArray(list: Uint8Array[], totalLength?: number): Uint8Array;
export declare function newKey(type?: KeyType): {
    priKey: string;
    pubKey: string;
};
export declare const defaultEc: any;
export declare const r1Ec: any;
export declare const sm2Ec: any;
export declare function getEcFromPrivKey(privKey: PrivateKey): any;
export declare function priKeyToPubKey(priKey: string): string;
