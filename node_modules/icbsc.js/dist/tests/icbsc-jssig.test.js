"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var elliptic_1 = require("elliptic");
var icbsc_key_conversions_1 = require("../icbsc-key-conversions");
var icbsc_jssig_1 = require("../icbsc-jssig");
var icbsc_numeric_1 = require("../icbsc-numeric");
describe('JsSignatureProvider', function () {
    var privateKeys = [
        '5Juww5SS6aLWxopXBAWzwqrwadiZKz7XpKAiktXTKcfBGi1DWg8',
        '5JnHjSFwe4r7xyqAUAaVs51G7HmzE86DWGa3VAA5VvQriGYnSUr',
        '5K4XZH5XR2By7Q5KTcZnPAmUMU5yjUNBdoKzzXyrLfmiEZJqoKE',
    ];
    var legacyPublicKeys = [
        'ICBS7tgwU6E7pAUQJgqEJt66Yi8cWvanTUW8ZfBjeXeJBQvhTU9ypi',
        'ICBS8VaY5CiTexYqgQZyPTJkc3qvWuZUi12QrZL9ssjqW2es6aQk2F',
        'ICBS7VGhqctkKprW1VUj19DZZiiZLX3YcJqUJCuEcahJmUCw3wJEMu',
    ];
    var k1FormatPublicKeys = [
        'PUB_K1_7tgwU6E7pAUQJgqEJt66Yi8cWvanTUW8ZfBjeXeJBQvhYTBFvY',
        'PUB_K1_8VaY5CiTexYqgQZyPTJkc3qvWuZUi12QrZL9ssjqW2es7e7bRJ',
        'PUB_K1_7VGhqctkKprW1VUj19DZZiiZLX3YcJqUJCuEcahJmUCw9RT8v2',
    ];
    var signatures = [
        'SIG_K1_HKkqi3zray76i63ZQwAHWMjoLk3wTa1ajZWPcUnrhgmSWQYEHDJsxkny6VDTWEmVdfktxpGoTA81qe6QuCrDmazeQndmxh',
        'SIG_K1_HCaY9Y9qdjnkRhE9hokAyp3pFtkMmjpxF6xTd514Vo8vLVSWKek5m5aHfCaka9TqZUbajkhhd4BfBLxSwCwZUEmy8cvt1x',
        'SIG_K1_GrZqp9ZkuhBeNpeQ5b2L2UWUUrNU1gHbTyMzkyWRhiXNkxPP84Aq9eziU399eBf9xJw8MqHHjz7R2wMTMXhXjHLgpZYFeA',
    ];
    var eccSignatures = [
        'SIG_K1_KeEyJFpkp63Qq5E1zRD9aNZtTjpStvdkdnL31Z7wVmhYtrKGtpVdMBJnXyEUXNkNEyo4d4i4Q79qmRpCUsCRdFqhV6KAeF',
        'SIG_K1_JvgMmFSDhipS1SeBLNBMdAxayAsWS3GuVGSHS7YQth5Z5ZpijxnZgaa23dYD1efQhpEgtEggdRfHMmp31RDXjmJdZYoKLm',
        'SIG_K1_JwMqV2nbEntHSq9AuG3Zq1JBc5YqD2SftMHCTGK4A8DYGn1VPQ8QAduwCNksT5JhYgAmGMzPyJdZ2Ws4p8TCvQ16LeNhrw',
    ];
    it('builds public keys from private when constructed', function () { return __awaiter(_this, void 0, void 0, function () {
        var provider, actualPublicKeys;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    provider = new icbsc_jssig_1.JsSignatureProvider(privateKeys);
                    return [4, provider.getAvailableKeys()];
                case 1:
                    actualPublicKeys = _a.sent();
                    expect(actualPublicKeys).toEqual(k1FormatPublicKeys);
                    return [2];
            }
        });
    }); });
    it('signs a transaction', function () { return __awaiter(_this, void 0, void 0, function () {
        var provider, chainId, requiredKeys, serializedTransaction, signOutput;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    provider = new icbsc_jssig_1.JsSignatureProvider(privateKeys);
                    chainId = '1234';
                    requiredKeys = k1FormatPublicKeys;
                    serializedTransaction = new Uint8Array([
                        0, 16, 32, 128, 255,
                    ]);
                    return [4, provider.sign({ chainId: chainId, requiredKeys: requiredKeys, serializedTransaction: serializedTransaction })];
                case 1:
                    signOutput = _a.sent();
                    expect(signOutput).toEqual({
                        signatures: signatures,
                        serializedTransaction: serializedTransaction,
                        serializedContextFreeData: undefined
                    });
                    return [2];
            }
        });
    }); });
    it('confirm elliptic conversion functions are actually reciprocal', function () { return __awaiter(_this, void 0, void 0, function () {
        var provider, chainId, requiredKeys, serializedTransaction, signOutput, sig, ellipticSig, eosSig;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    provider = new icbsc_jssig_1.JsSignatureProvider(privateKeys);
                    chainId = '1234';
                    requiredKeys = k1FormatPublicKeys;
                    serializedTransaction = new Uint8Array([
                        0, 16, 32, 128, 255,
                    ]);
                    return [4, provider.sign({ chainId: chainId, requiredKeys: requiredKeys, serializedTransaction: serializedTransaction })];
                case 1:
                    signOutput = _a.sent();
                    sig = icbsc_key_conversions_1.Signature.fromString(signOutput.signatures[0]);
                    ellipticSig = sig.toElliptic();
                    eosSig = icbsc_key_conversions_1.Signature.fromElliptic(ellipticSig, icbsc_numeric_1.KeyType.k1);
                    expect(sig).toEqual(eosSig);
                    return [2];
            }
        });
    }); });
    it('verify a transaction', function () { return __awaiter(_this, void 0, void 0, function () {
        var provider, chainId, requiredKeys, serializedTransaction, signOutput, EC, ellipticSig;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    provider = new icbsc_jssig_1.JsSignatureProvider([privateKeys[0]]);
                    chainId = '1234';
                    requiredKeys = [k1FormatPublicKeys[0]];
                    serializedTransaction = new Uint8Array([
                        0, 16, 32, 128, 255,
                    ]);
                    return [4, provider.sign({ chainId: chainId, requiredKeys: requiredKeys, serializedTransaction: serializedTransaction })];
                case 1:
                    signOutput = _a.sent();
                    EC = new elliptic_1.ec('secp256k1');
                    ellipticSig = icbsc_key_conversions_1.Signature.fromString(signOutput.signatures[0]).toElliptic();
                    expect(EC.verify(icbsc_jssig_1.digestFromSerializedData(chainId, serializedTransaction), ellipticSig, icbsc_key_conversions_1.PrivateKey.fromString(privateKeys[0]).toElliptic())).toEqual(true);
                    return [2];
            }
        });
    }); });
    it('ensure public key functions are actual inverses of each other', function () { return __awaiter(_this, void 0, void 0, function () {
        var eosioPubKey, ellipticPubKey, finalEosioKeyAsK1String;
        return __generator(this, function (_a) {
            eosioPubKey = icbsc_key_conversions_1.PublicKey.fromString(k1FormatPublicKeys[0]);
            ellipticPubKey = eosioPubKey.toElliptic();
            finalEosioKeyAsK1String = icbsc_key_conversions_1.PublicKey.fromElliptic(ellipticPubKey).toString();
            expect(finalEosioKeyAsK1String).toEqual(k1FormatPublicKeys[0]);
            return [2];
        });
    }); });
    it('verify that PUB_K1_ and Legacy pub formats are consistent', function () {
        var eosioLegacyPubKey = legacyPublicKeys[0];
        var ellipticPubKey = icbsc_key_conversions_1.PublicKey.fromString(eosioLegacyPubKey).toElliptic();
        expect(icbsc_key_conversions_1.PublicKey.fromElliptic(ellipticPubKey).toString()).toEqual(k1FormatPublicKeys[0]);
    });
    it('ensure private key functions are actual inverses of each other', function () { return __awaiter(_this, void 0, void 0, function () {
        var priv, privEosioKey, privEllipticKey, finalEosioKeyAsString;
        return __generator(this, function (_a) {
            priv = privateKeys[0];
            privEosioKey = icbsc_key_conversions_1.PrivateKey.fromString(priv);
            privEllipticKey = privEosioKey.toElliptic();
            finalEosioKeyAsString = icbsc_key_conversions_1.PrivateKey.fromElliptic(privEllipticKey).toString();
            expect(privEosioKey.toString()).toEqual(finalEosioKeyAsString);
            return [2];
        });
    }); });
    it('Ensure elliptic sign, recover, verify flow works', function () {
        var ellipticEc = new elliptic_1.ec('secp256k1');
        var KPriv = privateKeys[0];
        var KPrivElliptic = icbsc_key_conversions_1.PrivateKey.fromString(KPriv).toElliptic();
        var dataAsString = 'some string';
        var ellipticHashedString = ellipticEc.hash().update(dataAsString).digest();
        var ellipticSig = KPrivElliptic.sign(ellipticHashedString);
        var ellipticRecoveredKPub = ellipticEc.recoverPubKey(ellipticHashedString, ellipticSig, ellipticSig.recoveryParam);
        var ellipticKPub = ellipticEc.keyFromPublic(ellipticRecoveredKPub);
        expect(icbsc_key_conversions_1.PublicKey.fromElliptic(ellipticKPub).toString()).toEqual(k1FormatPublicKeys[0]);
        var ellipticValid = ellipticEc.verify(ellipticHashedString, ellipticSig, ellipticEc.keyFromPublic(ellipticKPub));
        expect(ellipticValid).toEqual(true);
    });
});
//# sourceMappingURL=icbsc-jssig.test.js.map