import { AbiProvider, AuthorityProvider, BinaryAbi, CachedAbi, SignatureProvider } from './icbsc-api-interfaces';
import { JsonRpc } from './icbsc-jsonrpc';
import { Abi, PushTransactionArgs } from './icbsc-rpc-interfaces';
import * as ser from './icbsc-serialize';
export declare class Api {
    rpc: JsonRpc;
    authorityProvider: AuthorityProvider;
    abiProvider: AbiProvider;
    signatureProvider: SignatureProvider;
    chainId: string;
    textEncoder: TextEncoder;
    textDecoder: TextDecoder;
    abiTypes: Map<string, ser.Type>;
    transactionTypes: Map<string, ser.Type>;
    contracts: Map<string, ser.Contract>;
    cachedAbis: Map<string, CachedAbi>;
    constructor(args: {
        rpc: JsonRpc;
        authorityProvider?: AuthorityProvider;
        abiProvider?: AbiProvider;
        signatureProvider: SignatureProvider;
        chainId?: string;
        textEncoder?: TextEncoder;
        textDecoder?: TextDecoder;
    });
    rawAbiToJson(rawAbi: Uint8Array): Abi;
    getCachedAbi(accountName: string, reload?: boolean): Promise<CachedAbi>;
    getAbi(accountName: string, reload?: boolean): Promise<Abi>;
    getTransactionAbis(transaction: any, reload?: boolean): Promise<BinaryAbi[]>;
    getContract(accountName: string, reload?: boolean): Promise<ser.Contract>;
    serialize(buffer: ser.SerialBuffer, type: string, value: any): void;
    deserialize(buffer: ser.SerialBuffer, type: string): any;
    serializeTransaction(transaction: any): Uint8Array;
    serializeContextFreeData(contextFreeData: Uint8Array[]): Uint8Array;
    deserializeTransaction(transaction: Uint8Array): any;
    serializeActions(actions: ser.Action[]): Promise<ser.SerializedAction[]>;
    deserializeActions(actions: ser.Action[]): Promise<ser.Action[]>;
    deserializeTransactionWithActions(transaction: Uint8Array | string): Promise<any>;
    transact(transaction: any, { broadcast, sign, blocksBehind, expireSeconds }?: {
        broadcast?: boolean;
        sign?: boolean;
        blocksBehind?: number;
        expireSeconds?: number;
    }): Promise<any>;
    pushSignedTransaction({ signatures, serializedTransaction, serializedContextFreeData }: PushTransactionArgs): Promise<any>;
    private hasRequiredTaposFields;
}
