"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var icbsc_numeric_1 = require("./icbsc-numeric");
var icbsc_serialize_1 = require("./icbsc-serialize");
var icbsc_key_conversions_1 = require("./icbsc-key-conversions");
exports.PrivateKey = icbsc_key_conversions_1.PrivateKey;
exports.PublicKey = icbsc_key_conversions_1.PublicKey;
exports.Signature = icbsc_key_conversions_1.Signature;
var icbsc_numeric_2 = require("./icbsc-numeric");
function digestFromSerializedData(chainId, serializedTransaction, serializedContextFreeData, e) {
    if (e === void 0) { e = icbsc_numeric_2.defaultEc; }
    var signBuf = icbsc_numeric_1.concatArray([
        icbsc_serialize_1.hexToUint8Array(chainId),
        serializedTransaction,
        serializedContextFreeData ?
            icbsc_serialize_1.hexToUint8Array(e.hash().update(serializedContextFreeData).digest()) :
            new Uint8Array(32)
    ]);
    return e.hash().update(signBuf).digest();
}
exports.digestFromSerializedData = digestFromSerializedData;
var JsSignatureProvider = (function () {
    function JsSignatureProvider(privateKeys) {
        var e_1, _a;
        this.keys = new Map();
        this.availableKeys = [];
        try {
            for (var privateKeys_1 = __values(privateKeys), privateKeys_1_1 = privateKeys_1.next(); !privateKeys_1_1.done; privateKeys_1_1 = privateKeys_1.next()) {
                var k = privateKeys_1_1.value;
                var privKey = icbsc_key_conversions_1.PrivateKey.fromString(k);
                var ec = icbsc_numeric_2.getEcFromPrivKey(privKey);
                var pubStr = icbsc_key_conversions_1.PublicKey.fromElliptic(privKey.toElliptic(ec), privKey.getType()).toString();
                this.keys.set(pubStr, privKey);
                this.availableKeys.push(pubStr);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (privateKeys_1_1 && !privateKeys_1_1.done && (_a = privateKeys_1.return)) _a.call(privateKeys_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    JsSignatureProvider.prototype.getAvailableKeys = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.availableKeys];
            });
        });
    };
    JsSignatureProvider.prototype.sign = function (_a) {
        var chainId = _a.chainId, requiredKeys = _a.requiredKeys, serializedTransaction = _a.serializedTransaction, serializedContextFreeData = _a.serializedContextFreeData;
        return __awaiter(this, void 0, void 0, function () {
            var e_2, _b, signatures, requiredKeys_1, requiredKeys_1_1, key, privKey, type, ec, digest, tries, sig, isCanonical, ellipticSig;
            return __generator(this, function (_c) {
                signatures = [];
                try {
                    for (requiredKeys_1 = __values(requiredKeys), requiredKeys_1_1 = requiredKeys_1.next(); !requiredKeys_1_1.done; requiredKeys_1_1 = requiredKeys_1.next()) {
                        key = requiredKeys_1_1.value;
                        privKey = this.keys.get(icbsc_numeric_2.convertLegacyPublicKey(key));
                        type = privKey.getType();
                        ec = icbsc_numeric_2.getEcFromPrivKey(privKey);
                        digest = digestFromSerializedData(chainId, serializedTransaction, serializedContextFreeData, ec);
                        tries = 0;
                        sig = void 0;
                        isCanonical = function (sigData) {
                            return !(sigData[1] & 0x80) && !(sigData[1] === 0 && !(sigData[2] & 0x80))
                                && !(sigData[33] & 0x80) && !(sigData[33] === 0 && !(sigData[34] & 0x80));
                        };
                        do {
                            ellipticSig = privKey.toElliptic(ec).sign(digest, { canonical: true, pers: [++tries] });
                            sig = icbsc_key_conversions_1.Signature.fromElliptic(ellipticSig, type);
                        } while (!isCanonical(sig.toBinary()));
                        signatures.push(sig.toString());
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (requiredKeys_1_1 && !requiredKeys_1_1.done && (_b = requiredKeys_1.return)) _b.call(requiredKeys_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                return [2, { signatures: signatures, serializedTransaction: serializedTransaction, serializedContextFreeData: serializedContextFreeData }];
            });
        });
    };
    return JsSignatureProvider;
}());
exports.JsSignatureProvider = JsSignatureProvider;
//# sourceMappingURL=icbsc-jssig.js.map