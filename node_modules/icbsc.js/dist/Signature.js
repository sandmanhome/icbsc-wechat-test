"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BN = require("bn.js");
var icbsc_numeric_1 = require("./icbsc-numeric");
var Signature = (function () {
    function Signature(signature) {
        this.signature = signature;
    }
    Signature.fromString = function (sig) {
        return new Signature(icbsc_numeric_1.stringToSignature(sig));
    };
    Signature.fromElliptic = function (ellipticSig, keyType) {
        if (keyType === void 0) { keyType = icbsc_numeric_1.KeyType.k1; }
        var r = ellipticSig.r.toArray();
        var s = ellipticSig.s.toArray();
        var sigData = new Uint8Array([ellipticSig.recoveryParam + 27].concat(r, s));
        return new Signature({
            type: keyType,
            data: sigData,
        });
    };
    Signature.prototype.toElliptic = function () {
        var lengthOfR = 32;
        var lengthOfS = 32;
        var r = new BN(this.signature.data.slice(1, lengthOfR + 1));
        var s = new BN(this.signature.data.slice(lengthOfR + 1, lengthOfR + lengthOfS + 1));
        var recoveryParam = (this.signature.data[0] - 27) & 3;
        return { r: r, s: s, recoveryParam: recoveryParam };
    };
    Signature.prototype.toString = function () {
        return icbsc_numeric_1.signatureToString(this.signature);
    };
    Signature.prototype.toBinary = function () {
        return this.signature.data;
    };
    return Signature;
}());
exports.Signature = Signature;
//# sourceMappingURL=Signature.js.map